/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package restaurante;

import tabelas.*;
import conexao.*;
import java.util.List;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author paulo
 */
public class pesquisa extends javax.swing.JFrame {

    /**
     * Creates new form pesquisa
     */
    public pesquisa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        tabela = new javax.swing.JComboBox<>();
        id = new javax.swing.JTextField();
        id_lbl = new javax.swing.JLabel();
        enviar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        limpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        titulo.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        titulo.setText("Pesquisa");

        tabela.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clientes", "Filiais", "Funcionários", "Reservas", "Fornecedores", "Estoque", "Pratos", "Bebidas", "Ingredientes", "Pedidos", "Entregas" }));

        id_lbl.setText("ID");

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });

        limpar.setText("Limpar");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(id_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tabela, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelLayout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addComponent(enviar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limpar)
                .addGap(67, 67, 67))
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_lbl))
                .addGap(18, 18, 18)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enviar)
                    .addComponent(sair)
                    .addComponent(limpar))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_sairActionPerformed

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        id.setText("");
    }//GEN-LAST:event_limparActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        String idSTR = id.getText();
        int id = -1;
        String table = (String) tabela.getSelectedItem();
        
        try{
            id = Integer.parseInt(idSTR);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Insira um número válido.");
            return;
        }
        
        if (table == null) {
            JOptionPane.showMessageDialog(this, "Selecione uma tabela.");
            return;
        }
        
        if("Clientes".equals(table)){
            DatabaseClientes pClientes = new DatabaseClientes();
            List<clientes> clientes = pClientes.readAll(id);
            
            if(clientes.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum cliente encontrado com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (clientes cliente : clientes) {
                    Info.append("CPF: ").append(cliente.getCPF())
                                .append("\nNome: ").append(cliente.getNome())
                                .append("\nSexo: ").append(cliente.getSexo())
                                .append("\nIdade: ").append(cliente.getIdade())
                                .append("\nEndereço: ").append(cliente.getEndereco())
                                .append("\nEmail: ").append(cliente.getEmail())
                                .append("\nTelefone: ").append(cliente.getTelefone())
                                .append("\nData de Cadastro: ").append(cliente.getData_cadastro())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Filiais".equals(table)){
            DatabaseFiliais pFilial = new DatabaseFiliais();
            List<filiais> filial = pFilial.readAll(id);
            
            if(filial.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhuma filial encontrada com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (filiais filiais : filial) {
                    Info.append("Endereço: ").append(filiais.getEndereco())
                                .append("\nEmail: ").append(filiais.getEmail())
                                .append("\nTelefone: ").append(filiais.getTelefone())
                                .append("\nQuantidade de Mesas: ").append(filiais.getQuant_mesas())
                                .append("\nAvaliação: ").append(filiais.getAvaliacao())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Funcionários".equals(table)){
            DatabaseFuncionarios pFuncionario = new DatabaseFuncionarios();
            List<funcionarios> funcionario = pFuncionario.readAll(id);
            
            if(funcionario.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum funcionário encontrado com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (funcionarios funcionarios : funcionario) {
                    Info.append("CPF: ").append(funcionarios.getCPF())
                                .append("\nNome: ").append(funcionarios.getNome())
                                .append("\nSexo: ").append(funcionarios.getSexo())
                                .append("\nIdade: ").append(funcionarios.getIdade())
                                .append("\nEndereço: ").append(funcionarios.getEndereco())
                                .append("\nEmail: ").append(funcionarios.getEmail())
                                .append("\nTelefone: ").append(funcionarios.getTelefone())
                                .append("ID da filial ").append(funcionarios.getID_filial())
                                .append("\nCargo: ").append(funcionarios.getCargo())
                                .append("\nData de Contratação: ").append(funcionarios.getData_contratacao())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Reservas".equals(table)){
            DatabaseReserva pReserva = new DatabaseReserva();
            List<reservas> reserva = pReserva.readAll(id);
            
            if(reserva.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhuma reserva encontrada com o id fornecido.");
            }else{
                StringBuilder clientesInfo = new StringBuilder();
                for (reservas reservas : reserva) {
                    clientesInfo.append("\nData da Reserva: ").append(reservas.getData_reserva())
                                .append("\nId do Cliente: ").append(reservas.getID_cliente())
                                .append("\nMesa: ").append(reservas.getMesa())
                                .append("\nId da Filial: ").append(reservas.getID_filial())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, clientesInfo.toString());
                }
            }
        }else if("Fornecedores".equals(table)){
            DatabaseFornecedores pFornecedores = new DatabaseFornecedores();
            List<fornecedores> fornecedor = pFornecedores.readAll(id);
            
            if(fornecedor.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum fornecedor encontrado com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (fornecedores fornecedores : fornecedor) {
                    Info.append("\nNome: ").append(fornecedores.getNome())
                                .append("\nCNPJ: ").append(fornecedores.getCNPJ())
                                .append("\nTipo do Material: ").append(fornecedores.getTipo_material())
                                .append("\nEmail: ").append(fornecedores.getEmail())
                                .append("\nTelefone: ").append(fornecedores.getTelefone())
                                .append("\nValor do Material: ").append(fornecedores.getValor_material())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Estoque".equals(table)){
            DatabaseEstoque pEstoque = new DatabaseEstoque();
            List<estoque> estoque = pEstoque.readAll(id);
            
            if(estoque.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum pedido encontrado com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (estoque estoques : estoque) {
                    Info.append("\nID do Fornecedor: ").append(estoques.getID_fornecedor())
                                .append("\nQuantidade: ").append(estoques.getQuantidade())
                                .append("\nID da Filial: ").append(estoques.getID_filial())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Pratos".equals(table)){
            DatabasePratos pPratos = new DatabasePratos();
            List<pratos> prato = pPratos.readAll(id);
            
            if(prato.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum prato encontrado com o id fornecido.");
            }else{
                StringBuilder clientesInfo = new StringBuilder();
                for (pratos pratos : prato) {
                    clientesInfo.append("\nNome: ").append(pratos.getNome())
                                .append("\nDescrição: ").append(pratos.getDescricao())
                                .append("\nValor: ").append(pratos.getValor())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, clientesInfo.toString());
                }
            }
        }else if("Bebidas".equals(table)){
            DatabaseBebidas pBebidas = new DatabaseBebidas();
            List<bebidas> bebidas = pBebidas.readAll(id);
            
            if(bebidas.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhuma bebida encontrada com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (bebidas bebida : bebidas) {
                    Info.append("\nNome: ").append(bebida.getNome())
                                .append("\nDescrição: ").append(bebida.getDescricao())
                                .append("\nValor: ").append(bebida.getValor())
                                .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Ingredientes".equals(table)){
            DatabaseIngredientes pIngredientes = new DatabaseIngredientes();
            List<ingredientes> ingrediente = pIngredientes.readAll(id);
            
            if(ingrediente.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum ingrediente encontrada com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (ingredientes ingredientes : ingrediente) {
                    Info.append("\nNome: ").append(ingredientes.getNome())
                        .append("\nUnidade de Medida: ").append(ingredientes.getUnidade_medida())
                        .append("\nID do Prato: ").append(ingredientes.getID_prato())
                        .append("\nID da Bebida: ").append(ingredientes.getID_bebida())
                        .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Pedidos".equals(table)){
            DatabasePedidos pPedidos = new DatabasePedidos();
            List<pedidos> pedidos = pPedidos.readAll(id);
            
            if(pedidos.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum pedido encontrada com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (pedidos pedido : pedidos) {
                    Info.append("ID do Cliente: ").append(pedido.getID_cliente())
                        .append("\nID do Prato: ").append(pedido.getID_prato())
                        .append("\nID da Bebida: ").append(pedido.getID_bebida())
                        .append("\nValor: ").append(pedido.getValor())
                        .append("\nTipo de Pagamento: ").append(pedido.getTipo_pagamento())
                        .append("\nEndereço: ").append(pedido.getEndereco())
                        .append("\nData do Pedido: ").append(pedido.getData_pedido())
                        .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }else if("Entregas".equals(table)){
            DatabaseEntregas pEntregas = new DatabaseEntregas();
            List<entrega> entregas = pEntregas.readAll(id);
            
            if(entregas.isEmpty()){
                JOptionPane.showMessageDialog(this, "Nenhum ingrediente encontrada com o id fornecido.");
            }else{
                StringBuilder Info = new StringBuilder();
                for (entrega entrega : entregas) {
                    Info.append("Endereço: ").append(entrega.getEndereco())
                        .append("\nID do Pedido: ").append(entrega.getID_pedido())
                        .append("\nData da Entrega: ").append(entrega.getData_entrega())
                        .append("\n\n");
                    JOptionPane.showMessageDialog(this, Info.toString());
                }
            }
        }
    }//GEN-LAST:event_enviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pesquisa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enviar;
    private javax.swing.JTextField id;
    private javax.swing.JLabel id_lbl;
    private javax.swing.JButton limpar;
    private javax.swing.JPanel painel;
    private javax.swing.JButton sair;
    private javax.swing.JComboBox<String> tabela;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
